#0 INTRODUCTION

==과정==
-node.js 설치되있어야 함
(노드JS라는 프레임워크 덕분에 자바스크립트로 서버단 기술까지 제어할 수 있게 된 것)
-package.json / babel / nodemon 알아야 함
(Nodemon : 소스 변경시 변경사항을 감지하여 자동으로 서버를 재시작해주는 tool)
(npm = node package manager : node 프로젝트의 패키지를 관리해 주는 저장소 역할)
(React의 경우 node.js와 npm을 이용해 개발)
-Express로 views를 설정해주고 render 해준다.
-views나 서버를 수정할 때만 nodemon이 재시작되도록 함
-mvp css 사용..

==정리==
첫째로 개발 환경을 구축한다.
Nodemon을 설정하기 위해 nodemon.json 을 설정함
->Nodemon은 우리의 프로젝트를 살펴보고 변경 사항이 있을 시 서버를 재시작해주는 프로그램이다.
->[서버를 재시작하는 대신에 babel-node를 실행하게 되는데
Babel은 우리가 작성한 코드를 일반 NodeJS 코드로 컴파일 해주는데
그 작업을 src/server.js파일에 해준다.]
->[server.js 파일에서는 express를 import하고, express어플리케이션을 구성하고
여기에 view engine을 Pug로 설정하고, views 디렉토리가 설정되고 
그리고 public파일들에 대해서도 똑같은 작업을 해준다.
(public 파일들은 Frontend에서 구동되는 코드고 이건 아주 중요한 부분!!)]

=>server.js는 BackEnd에서 구동될거고 app.js는 FrontEnd에서 구동된다.

<<server.js>>
app.use("/public", express.static(__dirname + "/public"));
=>유저에게 /public 폴더를 보여준다.
(public/js/app.js가 있고, css파일도 추가될 수 있다.)
app.get("/", (req, res) => res.render("home"));
=>홈페이지로 이동시 사용될 템플릿을 렌더해주는 것이다.
=>views폴더 내 home.pug와 렌더링함.
*catchall url을 만들고 싶다면,
app.get("/*", (req, res) => res.redirect("/"));
-->local:3000/blablabla->홈(local:3000)으로 돌려보내짐
